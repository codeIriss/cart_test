{"version":3,"sources":["components/Product.js","components/Total.js","components/ProductList.js","App.js","serviceWorker.js","index.js"],"names":["Product","props","state","qty","this","setState","prevState","handleTotal","price","name","onClick","add","bind","remove","disabled","Component","Total","total","ProductList","calculateTotal","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6NAIqBA,E,YAEjB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CAACC,IAAK,GAFH,E,mEAMhBC,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BH,IAAKG,EAAUH,IAAK,MAEtBC,KAAKH,MAAMM,YAAYH,KAAKH,MAAMO,S,+BAIhCJ,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC1BH,IAAKG,EAAUH,IAAK,MAGxBC,KAAKH,MAAMM,aAAaH,KAAKH,MAAMO,S,+BAKrC,OACE,6BACE,gCAAMJ,KAAKH,MAAMQ,MACjB,2CAAiBL,KAAKH,MAAMO,OAC5B,qCAAWJ,KAAKF,MAAMC,KACtB,4BAAQO,QAASN,KAAKO,IAAIC,KAAKR,OAA/B,OACA,4BAAQM,QAASN,KAAKS,OAAOD,KAAKR,MAAOU,SAAUV,KAAKF,MAAMC,IAAM,GAApE,UACA,kC,GA/B2BY,aCAhBC,E,iLAGf,OACE,6BACE,iDAAuBZ,KAAKH,MAAMgB,MAAlC,U,GALyBF,aCCdG,E,YACjB,WAAYjB,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CAACe,MAAO,GAFL,E,4EAIHT,GACbJ,KAAKC,UAAS,SAACC,GAAD,MAAgB,CAC5BW,MAAOX,EAAUW,MAAQT,Q,+BAK3B,OACE,6BACE,kBAAC,EAAD,CAASC,KAAK,WAAWD,MAAO,IAE9BD,YAAaH,KAAKe,eAAeP,KAAKR,QAExC,kBAAC,EAAD,CAASK,KAAK,WAAWD,MAAO,IAE9BD,YAAaH,KAAKe,eAAeP,KAAKR,QAExC,kBAAC,EAAD,CAASK,KAAK,UAAUD,MAAO,IAE7BD,YAAaH,KAAKe,eAAeP,KAAKR,QAExC,kBAAC,EAAD,CAAOa,MAAOb,KAAKF,MAAMe,a,GA1BMF,a,MCO1BK,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f29474bc.chunk.js","sourcesContent":["import React,{Component} from \"react\";\n\n\n\nexport default class Product extends Component{\n  \n    constructor(props){\n      super(props);\n      this.state = {qty: 0}\n    }\n    \n    add(){\n      this.setState((prevState) => ({\n        qty: prevState.qty +1\n      }));\n      this.props.handleTotal(this.props.price);\n    }\n  \n    remove(){\n        this.setState((prevState) => ({\n            qty: prevState.qty -1\n        \n        }));\n        this.props.handleTotal(-this.props.price);\n    }\n  \n    render(){\n      \n      return(\n        <div>\n          <h2> {this.props.name}</h2>\n          <h3> Price : Rs.{this.props.price}</h3>\n          <h4>Qty : {this.state.qty}</h4>\n          <button onClick={this.add.bind(this)}>add</button>\n          <button onClick={this.remove.bind(this)} disabled={this.state.qty < 1}>remove</button>\n          <hr/>\n        </div>\n      )\n    }\n  }","import React,{Component} from \"react\";\n\n\n\nexport default class Total extends Component{\n  \n    render(){\n      return(\n        <div>\n          <h4> Total Cash : Rs. {this.props.total} </h4>\n        </div>\n      )\n    }\n  } ","import React,{Component} from \"react\";\nimport Product from './Product';\nimport Total from './Total';\n\n\nexport default class ProductList extends Component{\n    constructor(props){\n      super(props);\n      this.state = {total: 0}\n    }\n    calculateTotal(price) {\n      this.setState((prevState) => ({\n        total: prevState.total + price\n      }));\n    }\n    \n    render(){\n      return(\n        <div>\n          <Product name=\"ONE PLUS\" price={100}\n            \n            handleTotal={this.calculateTotal.bind(this)}\n          />\n          <Product name=\"I PHONE \" price={150}\n           \n            handleTotal={this.calculateTotal.bind(this)}\n          />\n          <Product name=\"SAMSUNG\" price={200}\n            \n            handleTotal={this.calculateTotal.bind(this)}\n          />\n          <Total total={this.state.total}/>\n        </div>\n      )\n    }\n  } ","import React from 'react';\nimport ProductList from './components/ProductList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ProductList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}